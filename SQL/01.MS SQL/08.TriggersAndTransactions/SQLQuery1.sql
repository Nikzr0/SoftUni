--1
CREATE TABLE  LOGS 
(
LOGID INT,
ACCOUNTID INT PRIMARY KEY,
OLDSUM DECIMAL(10,2),
NEWSUM DECIMAL(10,2)
) 
INSERT INTO LOGS(LOGID, ACCOUNTID, OLDSUM)
VALUES(5, 45, 5)

SELECT * FROM LOGS

CREATE TRIGGER T_SUMONNEWLOG
ON LOGS FOR INSERT
AS
UPDATE LOGS SET NEWSUM = LOGID  + OLDSUM
SELECT * FROM LOGS
GO

--2


CREATE TABLE NOTIFICATIONEMAILS 
(
ID INT IDENTITY,
RECIPIENT INT,
SUBJECT VARCHAR(MAX),
BODY VARCHAR(MAX)
) 

SELECT * FROM NOTIFICATIONEMAILS

CREATE TRIGGER LOGGSRECORDS
ON LOGS FOR INSERT
AS
INSERT INTO NOTIFICATIONEMAILS (RECIPIENT, SUBJECT, BODY)
SELECT L.ACCOUNTID,
'BALANCE CHANGE FOR ACCOUNT: ' + CAST(L.ACCOUNTID AS VARCHAR(255)),
'ON ' + CURRENT_TIMESTAMP + 'YOUR BALANCE WAS CHANGED FROM ' + CAST(L.OLDSUM AS VARCHAR(255))  +' TO ' + CAST(L.NEWSUM AS VARCHAR(255)) + '.'
FROM LOGS AS L
JOIN DELETED D ON I.ID = D.ID
GO

DROP TRIGGER LOGGSRECORDS;  

--3
CREATE TABLE BANKACCOUNT
(
 ACCOUNTID INT PRIMARY KEY  IDENTITY,
 ACCOUNTHOLDERID INT,
 BALANCE DECIMAL(10,4)
) 

CREATE PROCEDURE USP_DEPOSITMONEY @ACCOUNTID INT, @MONEYAMOUNT DECIMAL(10,4)
AS
	IF @MONEYAMOUNT > 0 AND @ACCOUNTID > 0
	BEGIN
		UPDATE BANKACCOUNT SET BALANCE += @MONEYAMOUNT
		WHERE ACCOUNTID =  @ACCOUNTID 
	END
	ELSE 
		THROW 50006, 'INVALIT DATA', 1
GO

EXEC DBO.USP_DEPOSITMONEY 2, 10

SELECT * FROM BANKACCOUNT
INSERT INTO BANKACCOUNT(ACCOUNTHOLDERID, BALANCE)
VALUES(1,2)

--4
CREATE PROCEDURE WITHDRAWMONEY  @ACCOUNTID INT, @MONEYAMOUNT DECIMAL(10,4)
AS
IF (SELECT BALANCE FROM BANKACCOUNT WHERE ACCOUNTID =  @ACCOUNTID) - @MONEYAMOUNT >= 0
BEGIN
	UPDATE BANKACCOUNT SET BALANCE -= @MONEYAMOUNT
	WHERE ACCOUNTID =  @ACCOUNTID 
END
ELSE
THROW 50007,'THERE ARE NOT ENOUGH MONEY IN THE ACCOUNT', 1
GO

SELECT * FROM BANKACCOUNT 
EXEC WITHDRAWMONEY 2,

--5

CREATE PROCEDURE USP_TRANSFERMONEY @SENDERID INT, @RECEIVERID INT, @AMOUNT DECIMAL(10,4)
AS
BEGIN TRANSACTION
	IF (SELECT BALANCE FROM ACCOUNTS WHERE ID = @SENDERID) - @AMOUNT >= 0
	BEGIN
		UPDATE ACCOUNTS SET  BALANCE += @AMOUNT
		WHERE ID = @RECEIVERID
	END
	ELSE 
	BEGIN
		ROLLBACK;
		THROW 60000, 'NOT ENOUGH MONEY', 1
	END
COMMIT
GO

DROP PROCEDURE USP_TRANSFERMONEY
EXEC USP_TRANSFERMONEY 1, 2, 100

--6

GO

CREATE TRIGGER T_RESTRICTIONFORUSERSITEMS
ON USERGAMEITEMS INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO USERGAMEITEMS 
	SELECT INSERTED.ITEMID, INSERTED.USERGAMEID 
	FROM INSERTED 
		JOIN ITEMS  ON INSERTED.ITEMID = ITEMS.ID
		JOIN USERSGAMES  ON USERSGAMES.ID = INSERTED.USERGAMEID
	WHERE USERSGAMES.LEVEL >= ITEMS.MINLEVEL
END

GO

--6.2

UPDATE USERSGAMES
	SET CASH = CASH + 50000
	WHERE 
		GAMEID = (SELECT GAMEID FROM GAMES WHERE NAME = 'BALI') AND
		USERID IN 
			(
			SELECT ID 
			FROM USERS 
			WHERE USERNAME 
				IN (
					'BALEREMUDA', 
					'LOOSENOISE', 
					'INGUINALSELF', 
					'BUILDINGDELTOID', 
					'MONOXIDECOS'
					)
			)

--8

CREATE PROCEDURE USP_ASSIGNPROJECT @EMLOYEEID INT, @PROJECTID INT
AS
	BEGIN TRANSACTION
	IF	(SELECT COUNT(P.PROJECTID) FROM EMPLOYEES E
	JOIN EMPLOYEESPROJECTS EP ON E.EMPLOYEEID = EP.EMPLOYEEID
	JOIN PROJECTS P ON EP.PROJECTID = P.PROJECTID
	GROUP BY E.EMPLOYEEID
	HAVING E.EMPLOYEEID = @EMLOYEEID) > 3
	BEGIN
	ROLLBACK;
	THROW 50002, 'THE EMPLOYEE HAS TOO MANY PROJECTS!', 1
	END
	ELSE
	BEGIN
			INSERT INTO EMPLOYEESPROJECTS(EMPLOYEEID, PROJECTID)  VALUES(@EMLOYEEID,  @PROJECTID)
	END
	COMMIT
GO
DROP PROCEDURE USP_ASSIGNPROJECT
EXEC USP_ASSIGNPROJECT 220,9
EXEC USP_ASSIGNPROJECT 1,66

--9
CREATE TABLE DELETED_EMPLOYEES
(
EMPLOYEEID INT PRIMARY KEY,
FIRSTNAME VARCHAR(MAX),
LASTNAME VARCHAR(MAX),
MIDDLENAME VARCHAR(MAX),
JOBTITLE VARCHAR(MAX),
DEPARTMENTID INT NOT NULL,
SALARY MONEY 
) 

CREATE TRIGGER T_DELATEDEMPLOYEESSAVER
ON EMPLOYEES FOR DELETE
AS
INSERT INTO DELETED_EMPLOYEES (
		EMPLOYEEID,
		FIRSTNAME,
		LASTNAME,
		MIDDLENAME,
		JOBTITLE,
		DEPARTMENTID,
		SALARY
	) 
	SELECT 
		EMPLOYEEID,
		FIRSTNAME,
		LASTNAME,
		MIDDLENAME,
		JOBTITLE,
		DEPARTMENTID,
		SALARY
	FROM DELETED
GO
